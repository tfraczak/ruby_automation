PCI_PATH=~/code/patient-check-in
NC='\033[0;0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BOLD_YELLOW='\033[1;33m'
BOLD_WHITE='\033[1;37m'
UNDERLINE_WHITE='\033[4;37m'
ITALIC_WHITE='\033[3;37m'
BOLD_UNDERLINE_WHITE='\033[1;4;37m'
SIDEKIQ_COUNT=1
SIDEKIQ_MAXMEM_MB=400

alias cdPCI="cd $PCI_PATH"
alias editFunctions="code ~/.zsh_functions"
alias codePatientCheckIn="cdPCI && code ."
alias zoom="echo 'zoom_link' | pbcopy"
alias startServices="brew services start postgresql && brew services start redis && echo -e '${GREEN}--Services started${NC}'"
alias wipCommit="git add . && git commit -m 'WIP COMMIT'"
alias fp="~/code/personal/bin/push --force"
alias fixWork="rubocop -A && yarn lint --fix"
alias checkAndPush="validateWork && fp"
alias aptibleLogin="echo 'aptible not implemented'"
alias resetDatabaseAndSetup="clear && bundle exec rails db:drop && echo && bin/setup"
alias amendAndPush="~/code/personal/bin/amend_and_push"
alias commit="~/code/personal/bin/commit"
alias reset="~/code/personal/bin/reset_to_previous_commit"
alias validateWork="~/code/personal/bin/validate_work"
alias newBranch="~/code/personal/bin/new_branch"

checkRollbar() {
    if ! [[ $1 ]];
    then
        echo -e "${RED}--ERROR: need UUID${NC}"
        return -1
    fi

    /usr/bin/open -a "/Applications/Google Chrome.app" "https://rollbar.com/occurrence/uuid/?uuid=$1"
}

envHelpOutput() {
    echo
    echo -e "${UNDERLINE_WHITE}USAGE${NC}"
    echo -e "$1 <environment flag>${NC}"
    echo -e "Example: $1 -t"
    echo
    echo -e "${UNDERLINE_WHITE}OPTIONS${NC}"
    echo -e "${ITALIC_WHITE}ENVIRONMENT: valid flags for this environment${NC}"
    echo -e "DEVELOPMENT: -dev, --development"
    echo -e "       DEMO: -dem, --demo"
    echo -e "    TESTING:   -t, --testing"
    echo -e "    STAGING:   -s, --staging"
    echo -e " PRODUCTION:   -p, --production"
}

connectToEnvConsole() {
    (aptible ssh --app epion-check-in-$1 bundle exec rails c) || \
        (aptibleLogin && echo && connectToEnvConsole $1)
}

envConsole() {
    case "$1" in
        -t || --testing)
            connectToEnvConsole testing
            ;;
        -s || --staging)
            connectToEnvConsole staging
            ;;
        -p || --production)
            connectToEnvConsole production
            ;;
        -dev || --development)
            bundle exec rails c
            ;;
        -dem || --demo)
            connectToEnvConsole demo
            ;;
        -h || --help)
            envHelpOutput envConsole
            ;;
        *)
            if ! [[ $1 ]]
            then
                echo -e "${RED}--ERROR: need environment flag${NC}"
                return -1
            fi

            echo -e "${RED}--ERROR: $1 is not a valid environment flag${NC}"
            return -1
            ;;
    esac
}

connectToEnvShell() {
    (aptible ssh --app epion-check-in-$1) || (aptibleLogin && echo && connectToEnvShell $1)
}

envShell() {
    case "$1" in
        -t || --testing)
            connectToEnvShell testing
            ;;
        -s || --staging)
            connectToEnvShell staging
            ;;
        -p || --production)
            connectToEnvShell production
            ;;
        -d || --development)
            echo -e "${YELLOW}--Already in development environment shell${NC}"
            ;;
        -h || --help)
            envHelpOutput envShell
            ;;
        *)
            if ! [[ $1 ]]
            then
                echo -e "${RED}--ERROR: need environment flag${NC}"
                return -1
            fi

            echo -e "${RED}--ERROR: $1 is not a valid environment flag${NC}"
            return -1
            ;;
    esac
}

pciEnv() {
    case "$1" in
        -ssh || --shell)
            commandToRun="envShell"
            ;;
        -c || --console)
            commandToRun="envConsole"
            ;;
        -h || --help)
            echo
            echo -e "${UNDERLINE_WHITE}DESCRIPTION${NC}"
            echo -e "Connect to a specific environment's shell or console for the Patient Check-In app"
            echo
            echo -e "${UNDERLINE_WHITE}USAGE${NC}"
            echo -e "pciEnv <interface> <environment>${NC}"
            echo -e "Example: pciEnv -ssh -t"
            echo
            echo -e "${UNDERLINE_WHITE}OPTIONS${NC}"
            echo -e "${ITALIC_WHITE}INTERFACE: valid interface flags${NC}"
            echo -e "    SHELL: -ssh, --shell"
            echo -e "  CONSOLE: -c, --console"
            echo
            echo -e "${ITALIC_WHITE}ENVIRONMENT: valid flags for this environment${NC}"
            echo -e "DEVELOPMENT: -d, --development"
            echo -e "    TESTING: -t, --testing"
            echo -e "    STAGING: -s, --staging"
            echo -e " PRODUCTION: -p, --production"
            return 0
            ;;
        *)
            if ! [[ $1 ]]
            then
                echo -e "${RED}--ERROR: need interface flag${NC}"
                return -1
            fi

            echo -e "${RED}--ERROR: $1 is not a valid interface flag${NC}"
            return -1
            ;;
    esac

    case "$2" in
        -d || --development)
            $commandToRun -d
            ;;
        -t || --testing)
            $commandToRun -t
            ;;
        -s || --staging)
            $commandToRun -s
            ;;
        -p || --production)
            $commandToRun -p
            ;;
        *)
            if ! [[ $2 ]]
            then
                echo -e "${RED}--ERROR: need environment flag${NC}"
                return -1
            fi

            echo -e "${RED}--ERROR: $2 is not a valid environment flag${NC}"
            return -1
            ;;
    esac
}

co() {
    if ! [[ $1 ]]
    then
        echo -e "${RED}--ERROR: need a branch name partial to grep${NC}"
        return -1
    fi

    git branch | grep "$1" | xargs git checkout
}

searchSchemaHistory() {
    if ! [[ $1 ]];
    then
        echo -e "${RED}--ERROR: need a value to grep${NC}"
        return -1
    fi

    git log -p -- db/schema.rb | grep $1
}

pruneBranches() {
    local IFS=" "
    ~/code/personal/bin/prune_branches "${*}"
}

startSidekiq() {
    if ! [[ $1 ]];
    then
        echo -e "${RED}--ERROR: need sidekiq environment settings name${NC}"
        return -1
    fi

    cdPCI && \
    clear && \
    SIDEKIQ_COUNT=$SIDEKIQ_COUNT SIDEKIQ_MAXMEM_MB=$SIDEKIQ_MAXMEM_MB SIDEKIQ_PRELOAD= bundle exec sidekiqswarm -e development -C ./config/sidekiq-$1.yml && \
}

alias startRailsServer="cdPCI && clear && RUBY_YJIT_ENABLE=1 bundle exec rails s -p 3000"
alias startWebpack="cdPCI && clear && bin/shakapacker-dev-server"
alias startSidekiqInternal="cdPCI && clear && startSidekiq internal"
alias startSidekiqCheckin="cdPCI && clear && startSidekiq checkin"

openItermTab() {
    if ! [[ $1 ]]
    then
        echo -e "${RED}--ERROR: need profile name${NC}"
        return -1
    fi

    osascript -e 'tell application "iTerm2"' \
    -e "tell current window" \
    -e "create tab with profile \"$1\"" \
    -e "end tell" \
    -e "end tell" && \
}

startSidekiqs() {
    case "$1" in
        -S)
            openItermTab 'Sidekiq-Internal' && \
            openItermTab 'Sidekiq-Checkin'
            ;;
        -si)
            openItermTab 'Sidekiq-Internal'
            ;;
        -sc)
            openItermTab 'Sidekiq-Checkin'
            ;;
        *)
            ;;
    esac
}

runDev() {
    cdPCI && \
    bundle install && \
    yarn install && \
    bundle exec rails db:migrate && \
    openItermTab 'Server' && \
    openItermTab 'Shakapacker' && \
    startSidekiqs $1 && \
    openItermTab 'Console' && \
    clear
}

rs() {
    RUBYOPT="-W0" bundle exec rspec ${*}
}

loopSpec() {
    ~/code/personal/bin/loop_spec ${*}
}

rsChangedFiles() {
    ~/code/personal/bin/rspec_changed_files
}
